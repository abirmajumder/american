package com.util;

import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class StringUtil {

	static BiFunction<String, Stream<String>, Stream<String>> mult  = ( s1, l2 ) -> l2.map( s2 -> s1 + "_" + s2);

	public static String toCamelCase( String str, char delim ) {
		return
			String.valueOf(str.charAt(0)).toLowerCase() + 
			IntStream.range(1, str.length())
					.filter( i -> str.charAt(i) != delim)
					.mapToObj( i -> ( str.charAt(i - 1) == delim ) ? String.valueOf(str.charAt(i)).toUpperCase() : String.valueOf(str.charAt(i))  )
					.collect(Collectors.joining())
					;
	}
	
	public static String toCamelCase( String str ) {
		return toCamelCase( str, ' ' );
	}
	
	public static Object [] values ( Object obj ) throws IllegalArgumentException, IllegalAccessException {
		Field [] fields = obj.getClass().getDeclaredFields();
		Object [] values = new Object [ fields.length ];
		for( int i=0; i<fields.length; i++ ) {
			Field field = fields[i];
			field.setAccessible(true);
			values[i] = field.get(obj);
		}
		return values;
	}
	
	public static Stream<String> cross( List<String> listOne, List<String> listTwo ) {
		return
		 listOne.stream()
			.map( s1 -> mult.apply(s1, listTwo.stream()) )
			.reduce( ( a1,a2 ) -> Stream.concat(a1, a2))
			.get();
	}
	
}
